{
    "contractName": "TokenVault_Release",
    "constructorInputs": [
        {
            "name": "fund",
            "type": "pubkey"
        },
        {
            "name": "halvingLength",
            "type": "int"
        }
    ],
    "abi": [
        {
            "name": "release",
            "inputs": [
                {
                    "name": "signature",
                    "type": "sig"
                },
                {
                    "name": "blockHeight",
                    "type": "int"
                }
            ]
        }
    ],
    "bytecode": "OP_ROT OP_OVER OP_CHECKSIGVERIFY OP_2 OP_PICK OP_0 OP_GREATERTHANOREQUAL OP_VERIFY OP_2 OP_PICK OP_CHECKLOCKTIMEVERIFY OP_DROP OP_TXINPUTCOUNT OP_3 OP_NUMEQUALVERIFY OP_0 OP_OUTPOINTTXHASH OP_1 OP_OUTPOINTTXHASH OP_EQUALVERIFY OP_2 OP_UTXOTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_1 OP_UTXOTOKENCOMMITMENT OP_DUP OP_SIZE OP_NIP OP_8 OP_3 OP_MUL OP_NUMEQUALVERIFY OP_8 OP_SPLIT OP_8 OP_SPLIT OP_ROT OP_BIN2NUM OP_ROT OP_BIN2NUM OP_ROT OP_BIN2NUM OP_2 OP_PICK OP_0 OP_GREATERTHANOREQUAL OP_VERIFY OP_OVER OP_0 OP_GREATERTHANOREQUAL OP_VERIFY OP_2 OP_PICK OP_2 OP_PICK OP_GREATERTHANOREQUAL OP_VERIFY OP_DUP OP_0 OP_GREATERTHAN OP_VERIFY OP_4 OP_PICK OP_1 0065cd1d OP_1ADD OP_WITHIN OP_VERIFY OP_2 OP_PICK OP_CHECKLOCKTIMEVERIFY OP_DROP OP_5 OP_PICK OP_3 OP_PICK OP_GREATERTHANOREQUAL OP_VERIFY OP_5 OP_PICK OP_2 OP_PICK OP_2 OP_PICK OP_8 OP_PICK OP_6 OP_PICK OP_SUB OP_1ADD OP_DUP OP_5 OP_PICK OP_MUL OP_10 OP_ROLL OP_7 OP_PICK OP_SUB OP_1ADD OP_10 OP_PICK OP_GREATERTHANOREQUAL OP_IF OP_6 OP_PICK OP_10 OP_PICK OP_ADD OP_5 OP_ROLL OP_DROP OP_SWAP OP_TOALTSTACK OP_SWAP OP_TOALTSTACK OP_SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_4 OP_PICK OP_4 OP_ROLL OP_DROP OP_SWAP OP_TOALTSTACK OP_SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK OP_FROMALTSTACK OP_5 OP_PICK OP_2 OP_DIV OP_1 OP_MAX OP_3 OP_ROLL OP_DROP OP_SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK OP_4 OP_PICK OP_8 OP_PICK OP_SUB OP_ROT OP_DROP OP_SWAP OP_OVER OP_6 OP_PICK OP_MUL OP_NIP OP_ENDIF OP_0 OP_UTXOTOKENAMOUNT OP_OVER OP_SUB OP_DUP OP_0 OP_LESSTHANOREQUAL OP_IF OP_TXOUTPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_0 OP_OUTPUTTOKENAMOUNT OP_0 OP_UTXOTOKENAMOUNT OP_NUMEQUALVERIFY OP_ELSE OP_TXOUTPUTCOUNT OP_3 OP_NUMEQUALVERIFY OP_0 OP_OUTPUTTOKENAMOUNT OP_2 OP_PICK OP_NUMEQUALVERIFY OP_1 OP_OUTPUTTOKENAMOUNT OP_OVER OP_NUMEQUALVERIFY OP_1 OP_OUTPUTBYTECODE OP_0 OP_UTXOBYTECODE OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENCATEGORY OP_0 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_0 OP_UTXOBYTECODE OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCOMMITMENT OP_6 OP_PICK OP_8 OP_NUM2BIN OP_6 OP_PICK OP_8 OP_NUM2BIN OP_CAT OP_5 OP_PICK OP_8 OP_NUM2BIN OP_CAT OP_EQUALVERIFY OP_ENDIF 76a914 OP_10 OP_ROLL OP_HASH160 OP_CAT 88ac OP_CAT OP_0 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_2DROP OP_2DROP OP_2DROP OP_2DROP OP_2DROP OP_1",
    "source": "pragma cashscript >=0.9.3;\r\n\r\n/// <summary>\r\n///     Create a token release contract that follows a half-life algorithm\r\n/// </summary>\r\n/// <param name=\"fund\">The receiving fund</param>\r\n/// <param name=\"halvingLength\">The number of blocks between halvings</param>\r\ncontract TokenVault_Release(\r\n    pubkey fund,\r\n    int halvingLength,\r\n) {\r\n    /// <summary>\r\n    ///     Release the tokens up to the current block height or halving event which ever comes first\r\n    /// </summary>\r\n    /// <notes>\r\n    ///     If the halving event occurred between last release and current block then call this function multiple times to release all available funds\r\n    /// </notes>\r\n    /// <param name=\"signature\">Fund's signature</param>\r\n    /// <param name=\"blockHeight\">Block height to release up to</param>\r\n    /// <inputs>\r\n    ///     <i0>The token's UTXO</i0>\r\n    ///     <i1>The state object</i1>\r\n    ///     <i2>Transaction fee funding</i2>\r\n    /// </inputs>\r\n    /// <outputs>\r\n    ///     <o0>Send tokens to fund</o0>\r\n    ///     <o1>Return i0 back to contract unless EOL</o1>\r\n    ///     <o2>The state object unless EOL</o2>\r\n    /// </outputs>\r\n    function release(sig signature, int blockHeight) {\r\n        // auth\r\n        require(checkSig(signature, fund));\r\n\r\n        // function input validation\r\n        require(blockHeight >= 0);\r\n        require(tx.time >= blockHeight); // ensure blockHeight is at most the current height\r\n\r\n        // validate UTXO inputs\r\n        require(tx.inputs.length == 3);\r\n        // token and NFT should be from same transaction\r\n        require(tx.inputs[0].outpointTransactionHash == tx.inputs[1].outpointTransactionHash);\r\n        // ensure transaction fee input doesn't have other tokens or nfts\r\n        require(tx.inputs[2].tokenCategory == 0x);\r\n\r\n        // get state\r\n        bytes state = tx.inputs[1].nftCommitment;\r\n\r\n        // raw state validation\r\n        require(state.length == (8 * 3));\r\n\r\n        // split state\r\n        bytes releaseHeight_state, bytes rest = state.split(8);\r\n        bytes halvingHeight_state, bytes reward_state = rest.split(8);\r\n        \r\n        // type state\r\n        int releaseHeight = int(releaseHeight_state);\r\n        int halvingHeight = int(halvingHeight_state);\r\n        int reward = int(reward_state);\r\n\r\n        // validate typed state\r\n        require(releaseHeight >= 0);\r\n        require(halvingHeight >= 0);\r\n        require(releaseHeight >= halvingHeight);\r\n        require(reward > 0);\r\n        require(within(halvingLength, 1, 500000000 + 1));\r\n\r\n        // ensure blocks have been produced to release more\r\n        require(tx.time >= releaseHeight);\r\n        require(blockHeight >= releaseHeight);\r\n\r\n        // declare next state\r\n        int releaseHeight_next = blockHeight;\r\n        int halvingHeight_next = halvingHeight;\r\n        int reward_next = reward;\r\n\r\n        // start logic\r\n        int minedBlocksSinceLastRelease = blockHeight - releaseHeight + 1;\r\n        int releaseAmount = minedBlocksSinceLastRelease * reward;\r\n\r\n        // check for halving event; release height will stop at halving height\r\n        int minedBlocksSinceHalving = blockHeight - halvingHeight + 1;\r\n        if (minedBlocksSinceHalving >= halvingLength) {\r\n            releaseHeight_next = halvingHeight + halvingLength;\r\n            halvingHeight_next = releaseHeight_next;\r\n            reward_next = max(reward / 2, 1); // don't let it go to zero, a minimum of one token per block\r\n\r\n            // stop the release at the halving at most\r\n            minedBlocksSinceLastRelease = releaseHeight_next - releaseHeight;\r\n            releaseAmount = minedBlocksSinceLastRelease * reward;\r\n        }\r\n\r\n        // calculate token change\r\n        int changeAmount = tx.inputs[0].tokenAmount - releaseAmount;\r\n        \r\n        // validate UTXO outputs\r\n        if (changeAmount <= 0) { // EOL\r\n            require(tx.outputs.length == 1);\r\n            require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount);\r\n        } else { // normal release\r\n            require(tx.outputs.length == 3);\r\n\r\n            // Check that the released amount is sent to the fund\r\n            require(tx.outputs[0].tokenAmount == releaseAmount);\r\n\r\n            // Send the change token amount w/ updated state back to the same smart contract locking bytecode\r\n            require(tx.outputs[1].tokenAmount == changeAmount);\r\n            require(tx.outputs[1].lockingBytecode == tx.inputs[0].lockingBytecode); \r\n            require(tx.outputs[1].tokenCategory == tx.inputs[0].tokenCategory);\r\n\r\n            require(tx.outputs[2].lockingBytecode == tx.inputs[0].lockingBytecode); // Send the nft commitment to contract locking bytecode\r\n            require(tx.outputs[2].nftCommitment == bytes8(releaseHeight_next) + bytes8(halvingHeight_next) + bytes8(reward_next)); // Updated state check\r\n        }\r\n\r\n        bytes25 recipientLockingBytecode = new LockingBytecodeP2PKH(hash160(fund));\r\n        require(tx.outputs[0].lockingBytecode == recipientLockingBytecode); // ensure release is to the fund\r\n        require(tx.outputs[0].nftCommitment == 0x);\r\n        require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);\r\n    }\r\n}\r\n",
    "debug": {
        "bytecode": "527a5179ac69527900a2695279b175c3539c6900c851c8876952ce00876951cf007982775853959c69007a587f007a587f527a81527a81527a81527900a269517900a26952795279a269007900a069547951040065cd1d5193a5695279b17555795379a2695579527952795879567994519300795579955a7a5779945193007a5a79a26356795a7993557a757c6b7c6b7c6b7c6c6c6c5479547a757c6b7c6b7c6c6c5579529651a4537a757c6b7c6c5479587994527a757c5179567995517a756800d0517994007900a163c4519c6900d300d09c6967c4539c6900d352799c6951d351799c6951cd00c7876951d100ce876952cd00c7876952d256795880567958807e557958807e8769680376a9145a7aa97e0288ac7e00cd517a876900d200876900d100ce87695177777777777777777777",
        "sourceMap": "32:25:32:34;;:36::40;;:16::41:1;:8::43;35:16:35:27:0;;:31::32;:16:::1;:8::34;36:27:36:38:0;;:8::40:1;;39:16:39:32:0;:36::37;:16:::1;:8::39;41:26:41:27:0;:16::52;:66::67;:56::92;:16:::1;:8::94;43:26:43:27:0;:16::42;:46::48;:16:::1;:8::50;46:32:46:33:0;:22::48;49:16:49:21;;:::28;;:33::34;:37::38;:33:::1;:16::39;:8::41;52:48:52:53:0;;:60::61;:48::62:1;53:56:53:60:0;;:67::68;:56::69:1;56:32:56:51:0;;:28::52:1;57:32:57:51:0;;:28::52:1;58:25:58:37:0;;:21::38:1;61:16:61:29:0;;:33::34;:16:::1;:8::36;62:16:62:29:0;;:33::34;:16:::1;:8::36;63:16:63:29:0;;:33::46;;:16:::1;:8::48;64:16:64:22:0;;:25::26;:16:::1;:8::28;65:23:65:36:0;;:38::39;:41::50;:53::54;:41:::1;:16::55;:8::57;68:27:68:40:0;;:8::42:1;;69:16:69:27:0;;:31::44;;:16:::1;:8::46;72:33:72:44:0;;73::73:46;;74:26:74:32;;77:42:77:53;;:56::69;;:42:::1;:72::73:0;:42:::1;78:28:78:55:0;;:58::64;;:28:::1;81:38:81:49:0;;:52::65;;:38:::1;:68::69:0;:38:::1;82:12:82:35:0;;:39::52;;:12:::1;:54:90:9:0;83:33:83:46;;:49::62;;:33:::1;:12::63:0;;;;;;;;;;;;;84:33:84:51;;:12::52;;;;;;;;;;85:30:85:36;;:39::40;:30:::1;:42::43:0;:26::44:1;:12::45:0;;;;;;;88:42:88:60;;:63::76;;:42:::1;:12::77:0;;;;89:28:89:55;;:58::64;;:28:::1;:12::65:0;;;82:54:90:9:1;93:37:93:38:0;:27::51;:54::67;;:27:::1;96:12:96:24:0;;:28::29;:12:::1;:31:99:9:0;97:20:97:37;:41::42;:20:::1;:12::44;98:31:98:32:0;:20::45;:59::60;:49::73;:20:::1;:12::75;99:15:112:9:0;100:20:100:37;:41::42;:20:::1;:12::44;103:31:103:32:0;:20::45;:49::62;;:20:::1;:12::64;106:31:106:32:0;:20::45;:49::61;;:20:::1;:12::63;107:31:107:32:0;:20::49;:63::64;:53::81;:20:::1;:12::83;108:31:108:32:0;:20::47;:61::62;:51::77;:20:::1;:12::79;110:31:110:32:0;:20::49;:63::64;:53::81;:20:::1;:12::83;111:31:111:32:0;:20::47;:58::76;;:51::77:1;;:87::105:0;;:80::106:1;;:51;:116::127:0;;:109::128:1;;:51;:20;:12::130;99:15:112:9;114:43:114:82:0;:76::80;;:68::81:1;:43::82:0;;;115:27:115:28;:16::45;:49::73;;:16:::1;:8::75;116:27:116:28:0;:16::43;:47::49;:16:::1;:8::51;117:27:117:28:0;:16::43;:57::58;:47::73;:16:::1;:8::75;30:4:118:5;;;;;;;;;;",
        "logs": [],
        "requireMessages": []
    },
    "compiler": {
        "name": "cashc",
        "version": "0.10.0-next.5"
    },
    "updatedAt": "2024-06-27T18:29:52.464Z"
}
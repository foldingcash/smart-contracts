{
    "contractName": "TokenVault_Mint",
    "constructorInputs": [
        {
            "name": "fund",
            "type": "pubkey"
        }
    ],
    "abi": [
        {
            "name": "spend",
            "inputs": [
                {
                    "name": "signature",
                    "type": "sig"
                }
            ]
        },
        {
            "name": "mint",
            "inputs": [
                {
                    "name": "signature",
                    "type": "sig"
                },
                {
                    "name": "amount",
                    "type": "int"
                },
                {
                    "name": "lockAmount",
                    "type": "int"
                },
                {
                    "name": "blockHeight",
                    "type": "int"
                },
                {
                    "name": "reward",
                    "type": "int"
                }
            ]
        }
    ],
    "bytecode": "OP_OVER OP_0 OP_NUMEQUAL OP_IF OP_ROT OP_SWAP OP_CHECKSIG OP_NIP OP_ELSE OP_SWAP OP_1 OP_NUMEQUALVERIFY OP_SWAP OP_OVER OP_CHECKSIGVERIFY OP_OVER OP_0 OP_GREATERTHAN OP_VERIFY OP_2 OP_PICK OP_0 OP_GREATERTHAN OP_VERIFY OP_OVER OP_3 OP_PICK OP_GREATERTHANOREQUAL OP_VERIFY OP_3 OP_PICK OP_0 0065cd1d OP_1ADD OP_WITHIN OP_VERIFY OP_4 OP_PICK OP_1 OP_4 OP_PICK OP_1ADD OP_WITHIN OP_VERIFY OP_TXINPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_TXOUTPUTCOUNT OP_3 OP_NUMEQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENAMOUNT OP_3 OP_PICK OP_NUMEQUALVERIFY OP_1 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENCOMMITMENT OP_4 OP_PICK OP_8 OP_NUM2BIN OP_5 OP_ROLL OP_8 OP_NUM2BIN OP_CAT OP_5 OP_ROLL OP_8 OP_NUM2BIN OP_CAT OP_EQUALVERIFY 76a914 OP_SWAP OP_HASH160 OP_CAT 88ac OP_CAT OP_2 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_SWAP OP_SUB OP_0 OP_MAX OP_DUP OP_0 OP_GREATERTHAN OP_IF OP_2 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENAMOUNT OP_OVER OP_NUMEQUALVERIFY OP_ELSE OP_2 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_DROP OP_1 OP_ENDIF",
    "source": "pragma cashscript >=0.9.3;\r\n\r\n/// <summary>\r\n///     Mint the token and state for a token mining contract\r\n/// </summary>\r\n/// <param name=\"fund\">The address used to supply and auth the contract</param>\r\ncontract TokenVault_Mint(\r\n    pubkey fund,\r\n) {\r\n    /// <summary>\r\n    ///     Spend UTXOs with no restrictions\r\n    /// </summary>\r\n    /// <param name=\"signature\">The fund's transaction signature to spend UTXOs</param>\r\n    function spend(sig signature) {\r\n        // validate parameters\r\n        require(checkSig(signature, fund));\r\n    }\r\n\r\n    /// <summary>\r\n    ///     Mint a new token with state object for a token mining contract\r\n    /// </summary>\r\n    /// <param name=\"signature\">The fund's transaction signature to spend UTXOs</param>\r\n    /// <param name=\"amount\">The amount of tokens to mint</param>\r\n    /// <param name=\"lockAmount\">The amount of tokens that'll be locked in the mining contract</param>\r\n    /// <param name=\"blockHeight\">The block height the token mining will start</param>\r\n    /// <param name=\"reward\">The initial token reward per block</param>\r\n    /// <inputs>\r\n    ///     <i0>Funding input</i0>\r\n    /// </inputs>\r\n    /// <outputs>\r\n    ///     <o0>Create tokens</o0>\r\n    ///     <o1>Create state</o1>\r\n    ///     <o2>Return change to fund w/ any unlocked tokens</o2>\r\n    /// </outputs>\r\n    function mint(sig signature, int amount, int lockAmount, int blockHeight, int reward) {\r\n        // parameter validation\r\n        require(checkSig(signature, fund));\r\n        require(amount > 0);\r\n        require(lockAmount > 0);\r\n        require(amount >= lockAmount);\r\n        require(within(blockHeight, 0, 500000000 + 1));\r\n        require(within(reward, 1, lockAmount + 1));\r\n\r\n        // verify inputs\r\n        require(tx.inputs.length == 1);\r\n        require(tx.inputs[0].tokenCategory == 0x);\r\n        \r\n        // verify outputs\r\n        require(tx.outputs.length == 3);\r\n        \r\n        // verify token output        \r\n        require(tx.outputs[0].tokenCategory == tx.inputs[0].outpointTransactionHash);\r\n        require(tx.outputs[0].tokenAmount == lockAmount);\r\n\r\n        // verify state output\r\n        require(tx.outputs[1].tokenCategory == tx.inputs[0].outpointTransactionHash);\r\n        require(tx.outputs[1].nftCommitment == bytes8(blockHeight) + bytes8(blockHeight) + bytes8(reward));\r\n\r\n        // verify change output\r\n        bytes25 fundLockingBytecode = new LockingBytecodeP2PKH(hash160(fund));\r\n        require(tx.outputs[2].lockingBytecode == fundLockingBytecode);\r\n        require(tx.outputs[2].nftCommitment == 0x);\r\n\r\n        // verify token change output\r\n        int tokenChange = max(amount - lockAmount, 0);\r\n        if(tokenChange > 0) {\r\n            require(tx.outputs[2].tokenCategory == tx.inputs[0].outpointTransactionHash);\r\n            require(tx.outputs[2].tokenAmount == tokenChange);\r\n        } else {\r\n            require(tx.outputs[2].tokenCategory == 0x);\r\n        }\r\n    }\r\n}\r\n",
    "debug": {
        "bytecode": "5179009c63527a517aac7767517a519c69517a5179ac69517900a069527900a06951795379a269537900040065cd1d5193a56954795154795193a569c3519c6900ce008769c4539c6900d100c8876900d353799c6951d100c8876951d254795880557a58807e557a58807e87690376a914517aa97e0288ac7e52cd517a876952d2008769007a517a9400a4007900a06352d100c8876952d351799c696752d100876968517768",
        "sourceMap": "14:4:17:5;;;;;16:25:16:34;;:36::40;;:16::41:1;14:4:17:5;;35::72::0;;;;;37:25:37:34;;:36::40;;:16::41:1;:8::43;38:16:38:22:0;;:25::26;:16:::1;:8::28;39:16:39:26:0;;:29::30;:16:::1;:8::32;40:16:40:22:0;;:26::36;;:16:::1;:8::38;41:23:41:34:0;;:36::37;:39::48;:51::52;:39:::1;:16::53;:8::55;42:23:42:29:0;;:31::32;:34::44;;:47::48;:34:::1;:16::49;:8::51;45:16:45:32:0;:36::37;:16:::1;:8::39;46:26:46:27:0;:16::42;:46::48;:16:::1;:8::50;49:16:49:33:0;:37::38;:16:::1;:8::40;52:27:52:28:0;:16::43;:57::58;:47::83;:16:::1;:8::85;53:27:53:28:0;:16::41;:45::55;;:16:::1;:8::57;56:27:56:28:0;:16::43;:57::58;:47::83;:16:::1;:8::85;57:27:57:28:0;:16::43;:54::65;;:47::66:1;;:76::87:0;;:69::88:1;;:47;:98::104:0;;:91::105:1;;:47;:16;:8::107;60:38:60:77:0;:71::75;;:63::76:1;:38::77:0;;;61:27:61:28;:16::45;:49::68;;:16:::1;:8::70;62:27:62:28:0;:16::43;:47::49;:16:::1;:8::51;65:30:65:36:0;;:39::49;;:30:::1;:51::52:0;:26::53:1;66:11:66:22:0;;:25::26;:11:::1;:28:69:9:0;67:31:67:32;:20::47;:61::62;:51::87;:20:::1;:12::89;68:31:68:32:0;:20::45;:49::60;;:20:::1;:12::62;69:15:71:9:0;70:31:70:32;:20::47;:51::53;:20:::1;:12::55;69:15:71:9;35:4:72:5;;7:0:73:1",
        "logs": [],
        "requireMessages": []
    },
    "compiler": {
        "name": "cashc",
        "version": "0.10.0-next.5"
    },
    "updatedAt": "2024-06-27T18:29:52.444Z"
}
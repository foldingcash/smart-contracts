pragma cashscript >=0.9.3;

/// <summary>
///     Mint the token and state for a token mining contract
/// </summary>
/// <param name="fund">The address used to supply and auth the contract</param>
contract TokenVault_Mint(
    pubkey fund,
) {
    /// <summary>
    ///     Spend UTXOs with no restrictions
    /// </summary>
    /// <param name="signature">The fund's transaction signature to spend UTXOs</param>
    function spend(sig signature) {
        // validate parameters
        require(checkSig(signature, fund));
    }

    /// <summary>
    ///     Mint a new token with state object for a token mining contract
    /// </summary>
    /// <param name="signature">The fund's transaction signature to spend UTXOs</param>
    /// <param name="amount">The amount of tokens to mint</param>
    /// <param name="lockAmount">The amount of tokens that'll be locked in the mining contract</param>
    /// <param name="blockHeight">The block height the token mining will start</param>
    /// <param name="reward">The initial token reward per block</param>
    /// <inputs>
    ///     <i0>Funding input</i0>
    /// </inputs>
    /// <outputs>
    ///     <o0>Create tokens</o0>
    ///     <o1>Create state</o1>
    ///     <o2>Return change to fund w/ any unlocked tokens</o2>
    /// </outputs>
    function mint(sig signature, int amount, int lockAmount, int blockHeight, int reward) {
        // parameter validation
        require(checkSig(signature, fund));
        require(amount > 0);
        require(lockAmount > 0);
        require(amount >= lockAmount);
        require(within(blockHeight, 0, 500000000 + 1));
        require(within(reward, 1, lockAmount + 1));

        // verify inputs
        require(tx.inputs.length == 1);
        require(tx.inputs[0].tokenCategory == 0x);
        
        // verify outputs
        require(tx.outputs.length == 3);
        
        // verify token output        
        require(tx.outputs[0].tokenCategory == tx.inputs[0].outpointTransactionHash);
        require(tx.outputs[0].tokenAmount == lockAmount);

        // verify state output
        require(tx.outputs[1].tokenCategory == tx.inputs[0].outpointTransactionHash);
        require(tx.outputs[1].nftCommitment == bytes8(blockHeight) + bytes8(blockHeight) + bytes8(reward));

        // verify change output
        bytes25 fundLockingBytecode = new LockingBytecodeP2PKH(hash160(fund));
        require(tx.outputs[2].lockingBytecode == fundLockingBytecode);
        require(tx.outputs[2].nftCommitment == 0x);

        // verify token change output
        int tokenChange = max(amount - lockAmount, 0);
        if(tokenChange > 0) {
            require(tx.outputs[2].tokenCategory == tx.inputs[0].outpointTransactionHash);
            require(tx.outputs[2].tokenAmount == tokenChange);
        } else {
            require(tx.outputs[2].tokenCategory == 0x);
        }
    }
}
